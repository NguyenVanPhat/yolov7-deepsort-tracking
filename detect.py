import argparse
import time
from pathlib import Path

import cv2
import torch
import torch.backends.cudnn as cudnn
from numpy import random

from models.experimental import attempt_load
from utils.datasets import LoadStreams, LoadImages
from utils.general import check_img_size, check_requirements, check_imshow, non_max_suppression, apply_classifier, \
    scale_coords, xyxy2xywh, strip_optimizer, set_logging, increment_path
from utils.plots import plot_one_box, plot_one_box_center_point
from utils.torch_utils import select_device, load_classifier, time_synchronized, TracedModel


def pprint(name_variable, variable):
    print("\n------------------------------------------ "+"BI·∫æN "+name_variable+" ------------------------------------------")
    try:
        print("TYPE: " + "---" + str(type(variable)) + "---")
    except:
        print("ko hien thi duoc TYPE()")
    try:
        print("LEN: " + "---" + str(len(variable)) + "---")
    except:
        print("ko hien thi duoc LEN()")
    try:
        print("SHAPE: " + "---" + str(variable.shape) + "---")
    except:
        print("ko hien thi duoc SHAPE()")
    try:
        print("VALUE: ", variable)
    except:
        print("ko hien thi duoc VALUE")
    finally:
        print("------------------------------------------ K·∫æT TH√öC BI·∫æN {0} ------------------------------------------".format(name_variable))


def detect(save_img=False):
    # "save_txt" c√≥ Type: bool, m·∫∑c ƒë·ªãnh l√† False
    # "trace" c√≥ Type: bool, m·∫∑c ƒë·ªãnh l√† True
    source, weights, view_img, save_txt, imgsz, trace = opt.source, opt.weights, opt.view_img, opt.save_txt, opt.img_size, not opt.no_trace
    save_img = not opt.nosave and not source.endswith('.txt')  # save inference images
    webcam = source.isnumeric() or source.endswith('.txt') or source.lower().startswith(
        ('rtsp://', 'rtmp://', 'http://', 'https://'))

    # Directories
    save_dir = Path(increment_path(Path(opt.project) / opt.name, exist_ok=opt.exist_ok))  # increment run
    (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir

    # Initialize
    set_logging() # print th√¥ng tin h·ªá th·ªëng nh∆∞: "YOLOR üöÄ c5a68aa torch 1.12.1+cu113 CPU..."
    device = select_device(opt.device)
    # "half" = False n·∫øu  ƒëang s·ª≠ d·ª•ng cpu v√† "half" = "t√™n gpu" n·∫øu c√≥ s·ª≠ d·ª•ng GPU
    half = device.type != 'cpu'  # half precision only supported on CUDA

    # Load model
    # kh·ªüi t·∫°o m√¥ h√¨nh v√† n·∫°p tr·ªçng s·ªë ƒë√£ truy·ªÅn v√†o
    model = attempt_load(weights, map_location=device)  # load FP32 model
    stride = int(model.stride.max())  # model stride
    imgsz = check_img_size(imgsz, s=stride)  # check img_size

    # "trace" m·∫∑c ƒë·ªãnh = True, N·∫øu l√† False th√¨ model s·∫Ω v·∫´n l√† "model = attempt_load()" nh∆∞ ·ªü tr√™n
    if trace:
        # kh·ªüi t·∫°o Trace model v√† k·∫ø th·ª´a t·∫•t c·∫£ attribute c·ªßa model c≈© l√† "model = attempt_load()"
        # v·∫´n ch∆∞a bi·∫øt vai tr√≤ c·ªßa model n√†y trong Yolov7
        model = TracedModel(model, device, opt.img_size)

    if half:
        model.half()  # to FP16

    # Second-stage classifier
    classify = False
    if classify:
        modelc = load_classifier(name='resnet101', n=2)  # initialize
        modelc.load_state_dict(torch.load('weights/resnet101.pt', map_location=device)['model']).to(device).eval()

    # Set Dataloader
    vid_path, vid_writer = None, None
    if webcam:
        view_img = check_imshow()
        cudnn.benchmark = True  # set True to speed up constant image size inference
        dataset = LoadStreams(source, img_size=imgsz, stride=stride)
    else:
        # "dataset": c√≥ type: <class 'utils.datasets.LoadImages'>
        # d√πng ƒë·ªÉ l·∫•y ra d·ªØ li·ªáu theo t·ª´ng frame th√†nh 4 bi·∫øn "path, img, im0s, vid_cap"
        # l·∫•y frame t·ªõi ƒë√¢u x·ª≠ l√Ω ng√†y t·ªõi ƒë√≥
        dataset = LoadImages(source, img_size=imgsz, stride=stride)

    # Get names and colors
    # "hasattr" ki·ªÉm tra xem ƒë·ªëi t∆∞·ª£ng c√≥ attribute 'module' hay ko
    # N·∫øu "model = attempt_load()" ho·∫∑c "model = TracedModel()" s·∫Ω ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c "model.names"
    # bi·∫øn "names" l√∫c n√†y s·∫Ω get attribute "names" c·ªßa model
    # bi·∫øn "names" c√≥ TYPE=list, LEN=80, VALUE=['person', 'bicycle', 'car'...]
    names = model.module.names if hasattr(model, 'module') else model.names
    # "colors" c√≥ TYPE=list, LEN=80, VALUE=[[239, 9, 93], [153, 225, 34], [152, 194, 182]...]
    # "colors" ch·ª©a m√†u cho t·ª´ng classes, list colors s·∫Ω t·ª± ƒë·ªông thay ƒë·ªïi m·ªói l·∫ßn ch·∫°y file detect.py
    colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]

    # Run inference
    # ƒë·ªãnh nghƒ©a "inference": l√† qu√° tr√¨nh ph√¢n lo·∫°i v√† localization(b·∫£n ƒë·ªãa ho√°) t·ª´ng ƒë·ªëi
    # t∆∞·ª£ng xu·∫•t hi·ªán trong image.
    if device.type != 'cpu':
        model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
    old_img_w = old_img_h = imgsz
    old_img_b = 1

    # ƒë·∫∑t t0 l√† th·ªùi gian b·∫Øt ƒë·∫ßu ch·∫°y
    t0 = time.time()
    # path l√† ƒë∆∞·ªùng d·∫´n t·ªõi image/video ƒë·∫ßu v√†o, kh√¥ng b·ªã thay ƒë·ªïi trong su·ªët v√≤ng l·∫∑p
    # -----------------------------------------------
    # im0s l√† image ƒë·∫ßu v√†o, ƒë√≥ng vai tr√≤ l√† image g·ªëc ƒë·ªÉ ƒë·ªëi chi·∫øu
    # n·∫øu l√† video th√¨ im0s s·∫Ω l·∫ßn l∆∞·ª£t l√† t·ª´ng frame trong video...
    # h√¨nh ·∫£nh im0s c√≥ type: (numpy.ndarray)
    # c√≥ shape = (1080, 1920, 3)
    # -----------------------------------------------
    # img l√† image ƒë·∫ßu v√†o ƒë√£ ƒë∆∞·ª£c resize v√† x·ª≠ l√Ω ƒë·ªÉ c√≥ shape ph√π h·ª£p v·ªõi thu·∫≠t to√°n...
    # n·∫øu l√† video th√¨ img s·∫Ω l·∫ßn l∆∞·ª£t l√† t·ª´ng frame trong video...
    # h√¨nh ·∫£nh img c√≥ type: (numpy.ndarray)
    # gi·∫£ s·ª≠ ƒë·∫ßu v√†o c√≥ shape = (1080, 1920, 3) th√¨ img s·∫Ω ch·ªâ c√≤n shape = (3, 384, 640)
    # -----------------------------------------------
    # vid_cap c√≥ type: class 'cv2.VideoCapture'
    for path, img, im0s, vid_cap in dataset:
        # ƒëang ch·ªânh s·ª≠a t·ª´ng image t·ª´ trong "dataset" tr∆∞·ªõc khi ƒë∆∞a v√†o model ƒë·ªÉ predict
        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        # Warmup
        if device.type != 'cpu' and (
                old_img_b != img.shape[0] or old_img_h != img.shape[2] or old_img_w != img.shape[3]):
            old_img_b = img.shape[0]
            old_img_h = img.shape[2]
            old_img_w = img.shape[3]
            for i in range(3):
                model(img, augment=opt.augment)[0]

        # Inference
        t1 = time_synchronized()
        # "pred" c√≥ TYPE=<class 'torch.Tensor'>, SHAPE=[1, 15120, 85]
        # V·ªõi m·ªói img(3, 384, 640) truy·ªÅn v√†o model(img, augment=opt.augment) s·∫Ω tr·∫£ ra 1 tuple c√≥ LEN=2:
        # - Ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n l√† ƒë∆∞·ª£c g√°n v√†o bi·∫øn "pred" v√† c√≥ l√† 1 Tensor c√≥ SHAPE=[1, 15120, 85]
        # - Ph·∫ßn t·ª≠ th·ª© 2 l√† 1 list c√≥ LEN=3 ch·ª©a 3 Tensor kh√°c nhau:
        #   + Tensor 1 c√≥ SHAPE=[1, 3, 48, 80, 85]
        #   + Tensor 2 c√≥ SHAPE=[1, 3, 24, 40, 85]
        #   + Tensor 3 c√≥ SHAPE=[1, 3, 12, 20, 85]
        # --> ch√∫ √Ω: c√°c th√¥ng s·ªë n√†y √°p d·ª•ng v·ªõi thi·∫øt ƒë·∫∑t ch·ªâ detect 1 classes l√† ["person"].
        # trong v√≠ d·ª• video ƒë·∫ßu v√†o c√≥ 6 ng∆∞·ªùi ƒë∆∞·ª£c ph√°t hi·ªán
        pred = model(img, augment=opt.augment)[0]
        # "time_synchronized()" ƒë·ªÉ l·∫•y th·ªùi gi·∫°n ch·∫°y hi·ªán t·∫°i
        t2 = time_synchronized()

        # Apply NMS vi·∫øt t·∫Øt c·ªßa Non-Maximum Suppression: l√† 1 method trong th·ªã gi√°c m√°y t√≠nh gi√∫p ch·ªçn...
        # m·ªôt th·ª±c th·ªÉ duy nh·∫•t trong nhi·ªÅu th·ª±c th·ªÉ ch·ªìng ch√©o l√™n nhau (th·ª±c th·ªÉ trong b√†i n√†y l√†...
        # bounding boxes). Ph∆∞∆°ng ph√°p l√† lo·∫°i b·ªè c√°c th·ª±c th·ªÉ n·∫±m d∆∞·ªõi m·ªôt gi·ªõi h·∫°n x√°c xu·∫•t(%) ƒë√£ cho s·∫µn..
        # n·∫øu gi·ªõi h·∫°n x√°c xu·∫•t c√†ng cao th√¨ c√†ng kh·∫Øt khe trong vi·ªác ch·ªçn th·ª±c th·ªÉ hay n√≥i c√°ch kh√°c..
        # s·ªë l∆∞·ª£ng th·ª±c th·ªÉ ƒë∆∞·ª£c ch·ªçn s·∫Ω √≠t ƒëi, ch·ªâ nh·ªØng th·ª±c th·ªÉ c√≥ x√°c xu·∫•t cao ƒë√°ng tin c·∫≠y m·ªõi ƒë∆∞·ª£c ch·ªçn.
        # ----------------------------------------------------------------------------------------
        # "opt.conf_thres" m·∫∑c ƒë·ªãnh l√† 0.25(float)
        # "opt.iou_thres" m·∫∑c ƒë·ªãnh l√† 0.45(float)
        # "opt.classes" m·∫∑c ƒë·ªãnh l√† None(nghƒ©a l√† detect t·∫•t c√°c classes c√≥ th·ªÉ)
        # ----------------------------------------------------------------------------------------
        # v·ªõi m·ªói "pred"([1, 15120, 85]) b√™n tr√™n non_max_suppression() s·∫Ω tr·∫£ ra m·ªôt list of detections..
        # list n√†y ch·ª©a duy nh·∫•t 1 Tensor c√≥ SHAPE=[n, 6] v·ªõi n ·ªü ƒë√¢y l√† s·ªë ƒë·ªëi t∆∞·ª£ng ph√°t hi·ªán ƒë∆∞·ª£c..
        # trong image/frame. s·ªë 6 l√† s·ªë l∆∞·ª£ng th√¥ng s·ªë k·ªπ thu·∫≠t cho m·ªói object ƒë∆∞·ª£c ph√°t hi·ªán c·ª• th·ªÉ..
        # m·ªói object l√† 1 row trong Tensor c√≥ d·∫°ng ("bb" vi·∫øt t·∫Øt c·ªßa bounding boxes):..
        # [to·∫°_ƒë·ªô_X_top_left_bb, to·∫°_ƒë·ªô_Y_top_left_bb, to·∫°_ƒë·ªô_X_bottom_right_bb, to·∫°_ƒë·ªô_Y_bottom_right_bb, confident, classes]
        # --> l∆∞u √Ω: nh·ªØng th√¥ng s·ªë k·ªπ thu·∫≠t tr√™n (to·∫° ƒë·ªô t√¢m, chi·ªÅu cao...) ƒë·ªÅu ch∆∞a ƒë∆∞·ª£c m√£ ho√° th√†nh ƒë·ªãnh d·∫°ng..
        # theo chu·∫©n c·ªßa Yolo, v·∫´n ƒëang tr√¨nh b√†y d∆∞·ªõi d·∫°ng gi√° tr·ªã pixel v√† gi√° tr·ªã float
        pred = non_max_suppression(pred, opt.conf_thres, opt.iou_thres, classes=opt.classes, agnostic=opt.agnostic_nms)
        t3 = time_synchronized()

        # Apply Classifier
        if classify:
            pred = apply_classifier(pred, modelc, img, im0s)

        # Process detections
        # enumerate(pred) s·∫Ω l·∫•y ra ƒë∆∞·ª£c Tensor[n, 6] n·∫±m trong list "pred"
        for i, det in enumerate(pred):  # detections per image
            if webcam:  # batch_size >= 1
                p, s, im0, frame = path[i], '%g: ' % i, im0s[i].copy(), dataset.count
            else:
                # im0 ch√≠nh l√† im0s l√† image ƒë·∫ßu v√†o g·ªëc ƒë·ªÉ ƒë·ªëi chi·∫øu
                # frame l√† s·ªë frame hi·ªán t·∫°i trong t·∫•t c·∫£ frame c√≥ trong video..
                # v√≠ d·ª•: frame ƒë·∫ßu ti√™n th√¨ "frame = 1"
                p, s, im0, frame = path, '', im0s, getattr(dataset, 'frame', 0)
            # print("\nframe = ", frame)
            p = Path(p)  # to Path
            save_path = str(save_dir / p.name)  # img.jpg
            txt_path = str(save_dir / 'labels' / p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # img.txt
            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh
            if len(det):
                # Rescale boxes from img_size to im0 size
                # "img.shape" c√≥ type: <class 'torch.Size'>; value: [1, 3, 384, 640]
                # "im0.shape" c√≥ type: <class 'tuple'>; value: (1080, 1920, 3)
                # "scale_coords()" s·∫Ω chuy·ªÉn gi√° tr·ªã ph·∫ßn t·ª≠ trong "det" ƒëang ph√π h·ª£p v·ªõi "img.shape"..
                # th√†nh gi√° tr·ªã m·ªõi ph√π h·ª£p cho "im0.shape"..
                # -> V√≠ d·ª•: img.shape[2:]=[384, 640] c√≥ det=[523.44592, 69.83182, 561.39929, 143.79759, 0.90688, 0.00000]..
                # v·ªõi im0.shape=(1080, 1920, 3) c√≥ det=[1570.0, 173.0, 1684.0, 395.0, 0.906877, 0.0]
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                # Print results
                # Trong V√≠ d·ª• n√†y ch·ªâ ph√°t hi·ªán ƒë∆∞·ª£c 6 person n√™n "det[:, -1]=[0, 0, 0, 0, 0, 0]"
                # "det[:, -1].unique()" t√¨m ra c√°c gi√° tr·ªã kh√°c nhau trong Tensor, n·∫øu nhi·ªÅu ph·∫ßn t·ª≠..
                #  c√≥ value gi·ªëng nhau ch·ªâ l·∫•y 1 ra l√†m ƒë·∫°i di·ªán..
                # -> V√≠ d·ª•: tensor = [0, 0, 5] th√¨ tensor.unique() tr·∫£ ra 1 tensor kh√°c c√≥ value=[0, 5]
                for c in det[:, -1].unique():
                    # "n" c√≥ value = 6 ƒë·∫°i di·ªán cho s·ªë l∆∞·ª£ng object ƒë∆∞·ª£c dectect
                    # "s" c√≥ type=string; value="6 persons"
                    n = (det[:, -1] == c).sum()  # detections per class
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string

                for *xyxy, conf, cls in reversed(det):
                    if save_txt:  # Write to file
                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                        line = (cls, *xywh, conf) if opt.save_conf else (cls, *xywh)  # label format
                        with open(txt_path + '.txt', 'a') as f:
                            f.write(('%g ' * len(line)).rstrip() % line + '\n')
                    # "save_img" m·∫∑c ƒë·ªãnh l√† True
                    # "view_img" m·∫∑c ƒë·ªãnh l√† False v√† n·∫øu ƒë·∫∑t True th√¨ v·∫´n ko show dc tr√™n Colab
                    if save_img or view_img:  # Add bbox to image
                        # "label" c√≥ type = string; value = "person 0.76"
                        # value c√≥ d·∫°ng <T√™n classes> + <confidence>;
                        label = f'{names[int(cls)]} {conf:.2f}'
                        plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)

                '''
                if source.endswith(".mp4"):
                    print("This is Video File")
                    # Write results
                    # "reversed()" ƒë·∫£o ng∆∞·ª£c th·ª© t·ª± row c·ªßa Tensor truy·ªÅn v√†o
                    # -> V√≠ d·ª•: - det = [[0, 1, 2],
                    #                  [3, 4, 5]]
                    #           - reversed(det) = [[3, 4, 5],
                    #                            [0, 1, 2]]
                    # "conf" nh·∫≠n confidence c·ªßa t·ª´ng row trong "reversed(det)"
                    # "cls" nh·∫≠n classes c·ªßa t·ª´ng row trong "reversed(det)"
                    # "*xyxy" tr·∫£ ra n list (n l√† s·ªë l∆∞·ª£ng object ƒë∆∞·ª£c ph√°t hi·ªán), m·ªói list ch·ª©a 4 tensor..
                    # m·ªói tensor n√†y ch·ª©a 4 gi√° tr·ªã ƒë·∫ßu ti√™n trong m·ªói row "det"..
                    # nh∆∞ng khi g·ªçi "xyxy" s·∫Ω ch·ªâ tr·∫£ v·ªÅ gi√° tr·ªã t∆∞∆°ng ·ª©ng v·ªõi "conf" v√† "cls"
                    def xyxy2xywh_for_det_previous(det):
                        det_previous_temp = []
                        # for *xyxy, conf, cls in reversed(det):
                        for i in range(len(reversed(det))):
                            xywh = (xyxy2xywh(torch.tensor(reversed(det)[i][:4]).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                            xywh.append(reversed(det)[i][-2].item())
                            xywh.append(reversed(det)[i][-1].item())
                            # line = (xywh, reversed(det)[i][-2], reversed(det)[i][-1])  # label format
                            det_previous_temp.append(xywh)
                        return det_previous_temp


                    for *xyxy, conf, cls in reversed(det):
                        if save_txt:  # Write to file
                            xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                            line = (cls, *xywh, conf) if opt.save_conf else (cls, *xywh)  # label format
                            with open(txt_path + '.txt', 'a') as f:
                                f.write(('%g ' * len(line)).rstrip() % line + '\n')
                        # "save_img" m·∫∑c ƒë·ªãnh l√† True
                        # "view_img" m·∫∑c ƒë·ªãnh l√† False v√† n·∫øu ƒë·∫∑t True th√¨ v·∫´n ko show dc tr√™n Colab
                        if save_img or view_img:  # Add bbox to image
                            # "label" c√≥ type = string; value = "person 0.76"
                            # value c√≥ d·∫°ng <T√™n classes> + <confidence>;
                            label = f'{names[int(cls)]} {conf:.2f}'
                            plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)

                    if frame > 1:
                        for i in range(len(reversed(det))):
                                xywh_current = (xyxy2xywh(torch.tensor(reversed(det)[i][:4]).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                                xywh_current.append(reversed(det)[i][-2].item())
                                xywh_current.append(reversed(det)[i][-1].item())
                                pprint("xywh_current", xywh_current)
                                # xywh_previous = det_previous[i][:4]
                                # pprint("xywh_previous", xywh_previous)
                                print("i = ", i)
                                pprint("det_previous", det_previous[i])
                                plot_one_box_center_point(xywh_current, det_previous[i], im0, color=colors[int(cls)], line_thickness=3)
                                det_previous = xyxy2xywh_for_det_previous(det)
                    else:
                        det_previous = xyxy2xywh_for_det_previous(det)
                        # pprint("det_previous first time", det_previous)
                else:
                    for *xyxy, conf, cls in reversed(det):
                        if save_txt:  # Write to file
                            xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh
                            line = (cls, *xywh, conf) if opt.save_conf else (cls, *xywh)  # label format
                            with open(txt_path + '.txt', 'a') as f:
                                f.write(('%g ' * len(line)).rstrip() % line + '\n')
                        # "save_img" m·∫∑c ƒë·ªãnh l√† True
                        # "view_img" m·∫∑c ƒë·ªãnh l√† False v√† n·∫øu ƒë·∫∑t True th√¨ v·∫´n ko show dc tr√™n Colab
                        if save_img or view_img:  # Add bbox to image
                            # "label" c√≥ type = string; value = "person 0.76"
                            # value c√≥ d·∫°ng <T√™n classes> + <confidence>;
                            label = f'{names[int(cls)]} {conf:.2f}'
                            plot_one_box(xyxy, im0, label=label, color=colors[int(cls)], line_thickness=1)
                '''


            # Print time (inference + NMS)
            print(f'{s}Done. ({(1E3 * (t2 - t1)):.1f}ms) Inference, ({(1E3 * (t3 - t2)):.1f}ms) NMS')

            # Stream results
            if view_img:
                cv2.imshow(str(p), im0)
                cv2.waitKey(1)  # 1 millisecond

            # Save results (image with detections)
            if save_img:
                if dataset.mode == 'image':
                    cv2.imwrite(save_path, im0)
                    print(f" The image with the result is saved in: {save_path}")
                else:  # 'video' or 'stream'
                    if vid_path != save_path:  # new video
                        vid_path = save_path
                        if isinstance(vid_writer, cv2.VideoWriter):
                            vid_writer.release()  # release previous video writer
                        if vid_cap:  # video
                            fps = vid_cap.get(cv2.CAP_PROP_FPS)
                            w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                            h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                        else:  # stream
                            fps, w, h = 30, im0.shape[1], im0.shape[0]
                            save_path += '.mp4'
                        vid_writer = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))
                    vid_writer.write(im0)

    if save_txt or save_img:
        s = f"\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}" if save_txt else ''
        # print(f"Results saved to {save_dir}{s}")

    print(f'Done. ({time.time() - t0:.3f}s)')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--weights', nargs='+', type=str, default='yolov7.pt', help='model.pt path(s)')
    parser.add_argument('--source', type=str, default='inference/images', help='source')  # file/folder, 0 for webcam
    parser.add_argument('--img-size', type=int, default=640, help='inference size (pixels)')
    parser.add_argument('--conf-thres', type=float, default=0.25, help='object confidence threshold')
    parser.add_argument('--iou-thres', type=float, default=0.45, help='IOU threshold for NMS')
    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')
    parser.add_argument('--view-img', action='store_true', help='display results')
    parser.add_argument('--save-txt', action='store_true', help='save results to *.txt')
    parser.add_argument('--save-conf', action='store_true', help='save confidences (% accuracy predict of class) in --save-txt labels')
    parser.add_argument('--nosave', action='store_true', help='do not save images/videos')
    parser.add_argument('--classes', nargs='+', type=int, help='filter by class: --class 0, or --class 0 2 3')
    parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')
    parser.add_argument('--augment', action='store_true', help='augmented inference')
    parser.add_argument('--update', action='store_true', help='update all models')
    parser.add_argument('--project', default='runs/detect', help='save results to project/name')
    parser.add_argument('--name', default='exp', help='save results to project/name')
    parser.add_argument('--exist-ok', action='store_true', help='existing project/name ok, do not increment')
    parser.add_argument('--no-trace', action='store_true', help='don`t trace model')
    opt = parser.parse_args()
    # print(opt)
    # check_requirements(exclude=('pycocotools', 'thop'))

    with torch.no_grad():
        if opt.update:  # update all models (to fix SourceChangeWarning)
            for opt.weights in ['yolov7.pt']:
                detect()
                strip_optimizer(opt.weights)
        else:
            detect()
